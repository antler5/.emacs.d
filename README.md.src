# -*- mode: org -*-
# SPDX-FileCopyrightText: 2024 antlers <antlers@illucid.net>
# SPDX-License-Identifier: CC-BY-SA-4.0

@@html:<h1>.emacs.d</h1>@@

* Org-mode Variables                                               :noexport:

#+BEGIN_SRC elisp :session :results none :exports none
(setq org-pandoc-options '((shift-heading-level-by . 1)))
#+END_SRC

#+BEGIN_SRC sh :session shared :results none :exports none
package=".emacs.d"
channel_url="https://github.com/antler5/$package"
keyring_url="https://github.com/antler5/$package"
commit="91ab69b25fb8d64d6e73d2eab3b2ad008a829a16"
fingerprint="DACB 035F B9B0 EE9C 7E13  1AAA C310 15D9 6620 A955"
format() { printf '#+BEGIN_SRC %s\n%s\n#+END_SRC\n' "$1" "$2"; }
#+END_SRC

* Cloning and Authenticating

#+BEGIN_SRC sh :session shared :results output raw :exports results
format sh "git clone '$channel_url' && cd $package"
#+END_SRC

You may verify that each commit in this branch has been signed by an
authorized contributer via GNU Guix's [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-git-authenticate.html][authentication]] mechanism.

#+BEGIN_SRC sh :session shared :results output raw :exports results
format sh "\
git fetch origin keyring:keyring
guix git authenticate \\
  '$commit' \\
  '$fingerprint'"
#+END_SRC

* Running

I use a custom use-package keyword to pull in guix packages.
They just get stripped from the elisp and "tangled" out into a command like this:

@@html:
> [!NOTE]
> I don't run this (probably out-of-date) psudo-code directly.</br>
> This is a representation of the command assembled by <code>run.sh</code>,</br>
> extracted via `set -x` and edited for clarity.
@@

#+BEGIN_SRC bash :noeval
antlers@citrus ~/.emacs.d$ ./run.sh
+ [...]
+ guix shell --pure --container --network                                \
+   emacs emacs-use-package emacs-dash alsa-lib at-spi2-core bzip2 cairo \
+   cups dbus gcc-toolchain gdk-pixbuf glib gst-plugins-base gstreamer   \
+   gtk+ jq libxcomposite libxkbcommon libxkbfile libxrandr libxrender   \
+   libxtst mesa mit-krb5 mysql node nss pango patchelf pcsc-lite        \
+   postgresql pulseaudio python speech-dispatcher unixodbc wmctrl       \
+   xcb-util-cursor xcb-util-image xcb-util-keysyms xcb-util-wm xdotool  \
+   python-psutil python-pygments python-qtconsole                       \
+   -- emacs $@
#+END_SRC

* Defined Symbols

#+BEGIN_SRC elisp :exports results :results table :colnames '("Symbol" "Description")
(defun antlers/symbol-to-gh-search-link (sym)
  "Return an Org-formatted link to a GitHub search for =SYM=."
  (format "[[%s%s&type=code][%s]]"
    "https://github.com/search?q=repo%3Aantler5%2F.emacs.d%20+NOT+path%3AREADME.md+"
    (url-encode-url (symbol-name sym))
    (symbol-name sym)))
(defun antlers/symbol-to-synopsis (sym)
  "Return a short description of =SYM=."
  (let* ((sym (indirect-variable sym))
         (doc (or (get sym 'variable-documentation)
                  (ignore-errors (documentation sym)))))
    (seq-take-while (lambda (c) (not (char-equal c ?\n)))
      (if (seqp doc) doc '()))))
(cl-loop with init.el = (expand-file-name (locate-user-emacs-file "init.el"))
         with early-init.el = (expand-file-name (locate-user-emacs-file "early-init.el"))
         for sym being the symbols
         when (and (or (string-prefix-p "antlers" (symbol-name sym))
                       (string-prefix-p "spaceline" (symbol-name sym))
                       (string-suffix-p ":guix" (symbol-name sym)))
                   (or (boundp sym) (fboundp sym)))
         collect (list (antlers/symbol-to-gh-search-link sym)
                       (antlers/symbol-to-synopsis sym))
         into acc finally return (sort acc :key #'car))
#+END_SRC

* Export                                                           :noexport:
#+begin_src emacs-lisp :results none :exports none
'(:guix (emacs-ox-pandoc
         pandoc))
(progn
  (require 'ox-pandoc)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
  (org-pandoc-export-to-commonmark)
  (while (seq-filter (lambda (p) (equal (process-name p) "pandoc"))
                     (process-list))
    (sleep-for 0 15))
  (when (file-exists-p "README.md")
    (delete-file "README.md"))
  (with-temp-buffer
    (insert
      (string-join
        '("<!-- SPDX-FileCopyrightText: 2024 antlers <antlers@illucid.net> -->"
          "<!-- SPDX-License-Identifier: CC-BY-SA-4.0 -->"
          "<!-- This file is generated from $< -->"
          "<!-- Do not edit it directly -->"
          "")
        "\n"))
    (insert-file "README.md.md")
    (write-region (point-min) (point-max)
      "README.md" nil 'quietly))
  (delete-file "README.md.md"))
#+end_src

* Local Variables                                                  :noexport:
# Local Variables:
# truncate-lines: t
# End:
